// -----------------------------------------------------------------------------
//  HOTAS Warthog+Virpil Customizaed Mapping
//  Derived from HOTAS Warthog Universal HID Mapping by Sedenion
// -----------------------------------------------------------------------------
//  Main script file
//  Modified by: trancaruas
//  Version:  0.5
//  Intended for use with Thrustmaster Warthog Throttle + Virpil VPC MongoosT-50CM2 Grip + Thrustmaster TFRPRudder

/*
https://github.com/zeplintwo/AnalogWASD-2
https://github.com/Touille/ED-Warthog-Target-Script
*/

include "target.tmh"                                 // Standard TM Header
include "include/dx+.tmh"                            // DX++ Module
include "include/pov.tmh"                            // Custom POV Hat module
include "include/ldc.tmh"                            // LED Control module
include "include/keymap.tmh"                         // Key mapping customizatio
include "include/functions.tmh"                      // Custom functions

define SHIFT_ENABLED      1                          // Enable (1) or Disable (0) Shift Submode

define SHIFT_DEV          Throttle                   // Shift-Submode activation Button Device
define SHIFT_BTN          EACON                      // Shift-Submode activation Button ID

// Button & Hat Shift-Submode Activation
// -----------------------------------------------------------------------------
define H4_SHIFT           1        // Enable (1) or Disable (0) Shift-Submode for Hat 1
define BS_SHIFT           0        // Enable (1) or Disable (0) Shift-Submode for Boat Switch

// Button & Hat Long-Press Activation
// -----------------------------------------------------------------------------
define S1_LONG            1        // Enable (1) or Disable (0) Long-Press for S1 button
define S2_LONG            1        // Enable (1) or Disable (0) Long-Press for S2 button
define S3_LONG            1        // Enable (1) or Disable (0) Long-Press for S3 button
define S4_LONG            1        // Enable (1) or Disable (0) Long-Press for S4 button
define H2_LONG            1        // Enable (1) or Disable (0) Long-Press for Hat 2 L & R
define LTB_LONG           1        // Enable (1) or Disable (0) Long-Press for LTB button

define CS_LONG            1        // Enable (1) or Disable (0) Long-Press for CS Hat U & D
define CH_LONG            1        // Enable (1) or Disable (0) Long-Press for China Hat
define AP_LONG            1        // Enable (1) or Disable (0) Long-Press for AP button
define LDGH_LONG          1        // Enable (1) or Disable (0) Long-Press for LDGH button

// Common LED Config
// -----------------------------------------------------------------------------
define LED_BRIGHTNESS     128      // LED brightness level (0-255)
define LED_BACKLIGHT      1        // Enable (1) or Disable (0) LED Backlight

// Button-controlled LED Mapping
// -----------------------------------------------------------------------------

// Flight assist
define LED1_CONTROL       0        // Enable (1) or Disable (0) Controlled LED1
define LED1_DEV           Joystick // LED1 Controll Button Device
define LED1_BTN           VPNK     // LED1 Controll Button ID

// Rotational correction
define LED2_CONTROL       1        // Enable (1) or Disable (0) Controlled LED2
define LED2_DEV           Throttle // LED2 Controll Button Device
define LED2_BTN           RDRNRM   // LED2 Controll Button ID

// Silent run
define LED3_CONTROL       1        // Enable (1) or Disable (0) Controlled LED3
define LED3_DEV           Throttle // LED3 Controll Button Device
define LED3_BTN           APUON    // LED3 Controll Button ID

// Cargo scoop
define LED4_CONTROL       1        // Enable (1) or Disable (0) Controlled LED4
define LED4_DEV           Throttle // LED4 Controll Button Device
define LED4_BTN           BSF      // LED4 Controll Button ID

// Langing gear
define LED5_CONTROL       1        // Enable (1) or Disable (0) Controlled LED5
define LED5_DEV           Throttle // LED5 Controll Button Device
define LED5_BTN           BSB      // LED5 Controll Button ID

int main() {
  Configure( &HCougar,       MODE_EXCLUDED);
  Configure( &T16000,        MODE_EXCLUDED);
  Configure( &T16000L,       MODE_EXCLUDED);
  Configure( &TWCSThrottle,  MODE_EXCLUDED);
  Configure( &LMFD,          MODE_EXCLUDED);
  Configure( &RMFD,          MODE_EXCLUDED);
  Configure( &TFRPRudder,    MODE_FILTERED);
	
  //          Event Callback    Btn count   Joystick only
  //DXpInit(    &EventHandle,     120,        CREATE_JOYSTICK);
  DXpInit(    &EventHandle,     120);
  
  //               Pulse       Delay
  SetKBRate(       32,         15 );
  
  initSetThrottleCurves();
  //SetShiftButton(&Joystick, VPNK, &Throttle, PSF, PSB);
  SetShiftButton(&Joystick, VPNK, &Throttle, 0, 0);
  initUserHotSlotPinkyTrigger();
  
  // ------------------------------ Axis Mapping -------------------------------
  // DX Axis Mapping   
  //      Device       TM Axis     DX Axis           NORMAL/REVERSED  ABSOLUTE/RELATIVE
  MapAxis(&Joystick,   JOYX,       DX_X_AXIS,        AXIS_NORMAL,     MAP_ABSOLUTE);
  MapAxis(&Joystick,   JOYY,       DX_Y_AXIS,        AXIS_NORMAL,     MAP_ABSOLUTE);
  MapAxis(&Throttle,   SCX,        DX_XROT_AXIS,     AXIS_NORMAL,     MAP_ABSOLUTE);
  MapAxis(&Throttle,   SCY,        DX_YROT_AXIS,     AXIS_NORMAL,     MAP_ABSOLUTE);
  MapAxis(&Throttle,   THR_RIGHT,  DX_THROTTLE_AXIS, AXIS_NORMAL,     MAP_ABSOLUTE);
  MapAxis(&Throttle,   THR_FC,     DX_SLIDER_AXIS,   AXIS_NORMAL,     MAP_ABSOLUTE);
  MapAxis(&TFRPRudder, TRPRIGHT,   0,                AXIS_NORMAL,     MAP_ABSOLUTE);
  MapAxis(&TFRPRudder, TRUDDER,    0,                AXIS_NORMAL,     MAP_ABSOLUTE);
  MapAxis(&TFRPRudder, TRPLEFT,    0,                AXIS_NORMAL,     MAP_ABSOLUTE);
  
  // Axis Curves       
  //        Device     TM Axis     Left-DZ     Center-DZ   Right-DZ  Curve   Scale/Zoom
  SetSCurve(&Joystick, JOYX,       0,          0,          0,        0,      0);
  SetSCurve(&Joystick, JOYY,       0,          0,          0,        0,      0);
  SetSCurve(&Throttle, SCY,        0,          2,          0,        4,      0);
  SetSCurve(&Throttle, SCX,        0,          2,          0,        4,      0);
  SetSCurve(&Throttle, THR_FC,     0,          0,          0,        0,      0);
  SetJCurve(&Throttle, THR_RIGHT,  50,         50);
  if	   (Throttle[throttleUpKey]) ActKey(KEYON+PULSE+ThrottlePresetUP);
  else if  (Throttle[throttleMidKey]) ActKey(KEYON+PULSE+ThrottlePresetMID);
  else 	   ActKey(KEYON+PULSE+ThrottlePresetDOWN);  
  SetSCurve(&TFRPRudder, TRPLEFT, 0, 0, 0, 0, 0);
  SetSCurve(&TFRPRudder, TRUDDER, 0, 0, 0, 0, 0);
  SetSCurve(&TFRPRudder, TRPRIGHT, 0, 0, 0, 0, 0);

  // TODO Lock ALL commands

  // *** Main Trigger pre- and full press, original DX1&DX4
  // *** Primary fire
  MapKey(&Joystick, VTG1, EXEC("if(fireMode == 1) ActKey(KEYON+CHAIN(DOWN+primaryFire));"
                               "if(fireMode == 2) ActKey(KEYON+CHAIN(DOWN+secondaryFire));"));
  MapKeyR(&Joystick, VTG1, EXEC("ActKey(KEYON+CHAIN(UP+primaryFire, UP+secondaryFire));"));
  MapKey(&Joystick, VTG2, EXEC("ActKey(KEYON+CHAIN(DOWN+primaryFire, DOWN+secondaryFire));"));
  MapKeyR(&Joystick, VTG2, EXEC("ActKey(KEYON+CHAIN(UP+primaryFire, UP+secondaryFire));"));

  // *** Flip Trigger, original DX2
  // *** Primary Fire
  MapKey(&Joystick, VTG4, EXEC("ActKey(KEYON+CHAIN(DOWN+primaryFire));"));
  MapKeyR(&Joystick, VTG4, EXEC("ActKey(KEYON+CHAIN(UP+primaryFire));"));

  // *** Big Red Button, original DX3
  // *** UI Escape & Secondary fire
  // TODO PS button
  MapKeyIO(&Joystick, VTG3,
           0,
           EXEC("if(panelMode) ActKey(KEYON+CHAIN(PULSE+UIEscape));"
                "else ActKey(KEYON+CHAIN(DOWN+secondaryFire));"));
  MapKeyR(&Joystick, VTG3, EXEC("ActKey(KEYON+CHAIN(UP+secondaryFire));"));

  // *** Top right button, original DX5
  // *** Switch fire mode. Pinky: reset to Fire Mode 0
  MapKeyIO(&Joystick, VTG6,
           EXEC("fireMode = 0; printf(\"Fire Mode 0: Pre-trigger no fire\\xa\");"),
           SEQ(EXEC("fireMode = 1; printf(\"Fire Mode 1: Pre-trigger primary fire\\xa\");"),
               EXEC("fireMode = 2; printf(\"Fire Mode 2: Pre-trigger secondary\\xa\");"),
               EXEC("fireMode = 0; printf(\"Fire Mode 0: Pre-trigger no fire\\xa\");")));
  
  // *** Bottom right button, original DX5
  MapKey(&Joystick, VTG7, system("spawn \"C:\\Program Files\\AutoHotkey\" \"C:\\Program Files\\AutoHotkey\\AutoHotkey.exe\" \"C:\\Relax\\hotas\\firemode.ahk\""));

  // *** Pinkie switch, original DX7
  // *** Modifier & flight/drive assist toggle on double-click
  MapKey(&Joystick, VPNK, EXEC("initUserHotSlotPinkyTrigger();")); 	

  // *** Break lever, original DX8
  // *** Temporary Flight Assist on/off
  //MapKey(&Joystick, VBRK, CHAIN(KEYON+DOWN+flightAssist, LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1)));
  MapKey(&Joystick, VBRK, CHAIN(KEYON+DOWN+flightAssist));
  MapKeyR(&Joystick, VBRK, CHAIN(KEYON+UP+flightAssist));
 
  // *** Flip trigger, orignal DX9
  // *** Deploy hardpoints
  MapKey(&Joystick, VARM, EXEC("if(!Joystick[VPNK]) ActKey(KEYON+PULSE+deployHardpoints);"));
  
  // *** H1 thumb HAT, Original DX10-DX14
  // *** Countermeasures
  // TODO set ECM timer/release program
  MapKey(&Joystick, VH1P, SEQ(EXEC("ActKey(KEYON+DOWN+chargeECM);"),
                              EXEC("ActKey(KEYON+UP+chargeECM);")));
  MapKey(&Joystick, VH1U, 0);
  MapKey(&Joystick, VH1D, shieldCell);
  MapKey(&Joystick, VH1L, heatSink);
  MapKey(&Joystick, VH1R, chaffLaunch);

  // *** H2 POV / Left Bottom HAT, original DX15-DX19
  // *** Headlook & UI management
  MapKeyIO(&Joystick, VH2P,
      EXEC("ActKey(KEYON+CHAIN(PULSE+headlook)); panelMode=!panelMode;"),
      EXEC("if(panelMode) ActKey(KEYON+CHAIN(DOWN+UISelect)); else ActKey(KEYON+CHAIN(PULSE+headlookReset));"));
  MapKeyR(&Joystick, VH2P, EXEC("ActKey(KEYON+UP+headlook); ActKey(KEYON+CHAIN(UP+UISelect));"));
  
  MapKeyIO(&Joystick, VH2U,
      EXEC("ActKey(KEYON+PULSE+commsPanel); panelMode = 1;"),
      EXEC("if(panelMode) initDoubleTapHold(panelUp, panelNextPage); else ActKey(KEYON+DOWN+headlookUp);"));
  MapKeyR(&Joystick, VH2U, EXEC("ActKey(KEYON+UP+headlookUp); ActKey(KEYON+UP+panelUp);"));

  MapKeyIO(&Joystick, VH2D,
      EXEC("ActKey(KEYON+PULSE+rolePanel); panelMode = 1;"),
      EXEC("if(panelMode) initDoubleTapHold(panelDown, panelPrevPage); else ActKey(KEYON+DOWN+headlookDown);"));
  MapKeyR(&Joystick, VH2D, EXEC("ActKey(KEYON+UP+headlookDown); ActKey(KEYON+UP+panelDown);"));

  MapKeyIO(&Joystick, VH2L,
      EXEC("ActKey(KEYON+PULSE+targetPanel); panelMode = 1;"),
      EXEC("if(panelMode) initDoubleTapHold(panelLeft, panelLeftTab); else ActKey(KEYON+DOWN+headlookLeft);"));
  MapKeyR(&Joystick, VH2L, EXEC("ActKey(KEYON+UP+headlookLeft); ActKey(KEYON+UP+panelLeft);"));

  MapKeyIO(&Joystick, VH2R,
      EXEC("ActKey(KEYON+PULSE+systemPanel); panelMode = 1;"),
      EXEC("if(panelMode) initDoubleTapHold(panelRight, panelRightTab); else ActKey(KEYON+DOWN+headlookRight);"));
  MapKeyR(&Joystick, VH2R, EXEC("ActKey(KEYON+UP+headlookRight); ActKey(KEYON+UP+panelRight);"));
  
  //SetPov(       &Joystick,     H3 ); // Use H3 as POV
  //OR
  // *** H3 Bottom Center HAT, original DX20=DX24
  // *** Target Management, long press - repead keystroke
  // TODO MMapKey* function that detect keystroke name and automagically select device
  MapKey(&Joystick, VH3P, TEMPO(EXEC("ActKey(KEYON+PULSE+targetAhead);"),
                                EXEC("ActKey(KEYON+DOWN+targetAhead);"),
                                250));
  MapKeyR(&Joystick, VH3P, EXEC("ActKey(KEYON+UP+targetAhead);"));  
  MapKey(&Joystick, VH3U, TEMPO(EXEC("if(!Joystick[VPNK]) ActKey(KEYON+PULSE+targetHighest);"
                                     "else ActKey(KEYON+PULSE+targetNextHostile);"),
                                EXEC("ActKey(KEYON+DOWN+targetHighest);"),
                                250));
  MapKeyR(&Joystick, VH3U, EXEC("ActKey(KEYON+UP+targetHighest);"));
  MapKey(&Joystick, VH3D, TEMPO(EXEC("if(!Joystick[VPNK]) ActKey(KEYON+PULSE+targetNextRoute);"
                                     "else ActKey(KEYON+PULSE+targetPrevHostile);"),
                                EXEC("ActKey(KEYON+DOWN+targetNextRoute);"),
                                250));
  MapKeyR(&Joystick, VH3D, EXEC("ActKey(KEYON+UP+targetNextRoute);"));
  MapKey(&Joystick, VH3L, TEMPO(EXEC("if(!Joystick[VPNK]) ActKey(KEYON+PULSE+targetNextSubsys);"
                                     "else ActKey(KEYON+PULSE+targetPrevSubsys);"),
                                EXEC("ActKey(KEYON+DOWN+targetNextSubsys);"),
                                250));
  MapKeyR(&Joystick, VH3L, EXEC("ActKey(KEYON+UP+targetNextSubsys);"));
  MapKey(&Joystick, VH3R, TEMPO(EXEC("if(!Joystick[VPNK]) ActKey(KEYON+PULSE+targetNext);"
                                     "else ActKey(KEYON+PULSE+targetPrev);"),
                                EXEC("ActKey(KEYON+DOWN+targetNext);"),
                                250));
  MapKeyR(&Joystick, VH3R, EXEC("ActKey(KEYON+UP+targetNext);"));

  // *** Center Up Pyramid HAT 4-way, original DX25-DX29
  // ** PIP + Long press audio control
  MapKey(&Joystick, VH4U, TEMPO(EXEC("if(!Joystick[VPNK]) ActKey(KEYON+PULSE+powerEng);"               // [Short: 1xENG]
                                     "else initPIPMapper(ENG,WEP);"),                                  // [Shift: Ext ENG]
                                EXEC("if(!Joystick[VPNK]) ActKey(KEYON+PULSE+galNetAudioPlayPause);"   // [Long:  GalNet Audio Play/Pause]
                                     "else ActKey(KEYON+DOWN+powerEng);"),                             // [Shift Long: Repeat]
                                PIPPressDelay));
  MapKeyR(&Joystick, VH4U, EXEC("ActKey(KEYON+UP+powerEng);"));
  MapKey(&Joystick, VH4D, TEMPO(EXEC("ActKey(KEYON+PULSE+balancePower);"),                             // [Short: Balance]
                                EXEC("if(!Joystick[VPNK]) ActKey(KEYON+PULSE+galNetAudioClearQueue);"  // [Long:  GalNet Audio Clear Queue]
                                     "else ActKey(KEYON+DOWN+balancePower);"),
                                PIPPressDelay));
  MapKeyR(&Joystick, VH4D, EXEC("ActKey(KEYON+UP+balancePower);"));
  MapKey(&Joystick, VH4L, TEMPO(EXEC("if(!Joystick[VPNK]) ActKey(KEYON+PULSE+powerSys);"               // H4 LEFT (H3L) [Short: 1xSYS]
                                     "else initPIPMapper(SYS,ENG);"),                      
                                EXEC("ActKey(KEYON+PULSE+galNetAudioPrev);"),                          // [Long:  GalNet Audio Previous Track]
                                PIPPressDelay));
                                
  MapKey(&Joystick, VH4R, TEMPO(EXEC("if(!Joystick[VPNK]) ActKey(KEYON+PULSE+powerWep);"               // H4 RIGHT (H3R) [Short: 1xWEP]
                                     "else initPIPMapper(WEP,ENG);"),                     
                                EXEC("ActKey(KEYON+PULSE+galNetAudioNext);"),                          // [Long:  galNet Audio Next Track]
                                PIPPressDelay));

  // *** Index finger HAT 2-way
  // *** Firegroup & Cockpit mode management
  // TODO Combined primary&secondary fire toggle
  // tg1 pre primary // tg2 primary + secondary // tg3 secondary
  // tg3 toggle modes
  // tg1 pre secondary // tg2 primary + secondary
  // TODO Forward next subsystem / toggle fire mode
  MapKey(&Joystick, VH5B, EXEC("ActKey(KEYON+PULSE+firegroupNext);"));
  MapKey(&Joystick, VH5P, EXEC("ActKey(KEYON+PULSE+cockpitMode);"));
  MapKey(&Joystick, VH5F, EXEC("ActKey(KEYON+PULSE+firegroupPrev);"));

  // https://github.com/Touille/ED-Warthog-Target-Script/blob/beta-3.3-Beyond-Chapter-Four-API/Thrustmaster%20Warthog%20Script/ED%2BHCS%20v3.3_Functions_TOGGLE.tmh
  /*
  int initToggleCombinedFire(){
    sCombinedFire=!sCombinedFire;
    if(sCombinedFire){	//Combine Primary & Secondary Fire on TG2
      MapKey (&Joystick, TG2, EXEC("initFire();"));
      MapKeyR(&Joystick, TG2, EXEC("initFire();"));
    }
    else{	//Separate Primary & Secondary Fire Press TG2 do Nothing
      MapKey (&Joystick, TG2, 0);
      MapKeyR(&Joystick, TG2, 0);
    }
    initLED(CombinedFire_LED, sCombinedFire);
    if(DebugMode | DebugMMode) printf("Primary & Secondary Fire	[%d]	[COMBINED:[1] SEPARATE[0]]\x0a", sCombinedFire);
  }
  */

  // --------------------------- Throttle Mapping ------------------------------

  // *** Throttle Pinky Switch
  // TODO Hide ship GUI / Hide UI ? 
  MapKey(&Throttle, PSF,  CHAIN(LOCK+PULSE+extCamera, D(150), PULSE+hideCameraGUI, LOCK));
  MapKeyR(&Throttle, PSF,  PULSE+extCamera);
  MapKey(&Throttle, PSM,  0);
  MapKey(&Throttle, PSB, CHAIN(LOCK+PULSE+extCamera, D(150), PULSE+enterFreeCameraMode, D(150), PULSE+hideCameraGUI, LOCK));
  MapKeyR(&Throttle, PSB, PULSE+extCamera); // chain exit free-> exit cam, 

  /*
    https://github.com/Touille/ED-Warthog-Target-Script/blob/beta-3.3-Beyond-Chapter-Four-API/Thrustmaster%20Warthog%20Script/ED%2BHCS%20v3.3_API_TCP.tmh

  // TOGGLE: Voice Attack Mic
  int initToggleVoiceAttackMic(){
    if(VoiceAttack){
      sVoiceAttack=!sVoiceAttack;
      ActKey(KEYON+PULSE+ToggleVoiceAttackMic);
      initLED(VA_LED, sVoiceAttack);
      if(DebugMode | DebugMMode) printf("Voice Attack Mic	[%d]	[MUTE:[1] UNMUTE:[0]]\x0a", sVoiceAttack);
    }
  }

  // TOGGLE: PTT/PTP
  int initTogglePTTPTP(){
    sPTTMode=!sPTTMode;
    initLED(PTTMode_LED, sPTTMode);
    if(DebugMode | DebugMMode) printf("PTTMode Change	[%d]	[HOLD:[0] TOGGLE:[1]]\x0a", sPTTMode);
  }
	
  // TOGGLE: External/Internal Voice
  int initTogglePTTMode(){
    sPTTState=!sPTTState;
    initLED(PTT_LED, sPTTState);
    if(DebugMode | DebugMMode) printf("Mic Change		[%d]	[External:[0]Internal:[1]]\x0a", sPTTState);
  }	
  */
  
  // *** Slew Control Push SC, original DX40
  MapKey(&Throttle, SC, DX40 );
  //MapKey(&Throttle, SC, EXEC("ActKey(KEYON+PULSE+engineBoost);"));
  
  // *** Left Throttle Button (RED) LTB, original DX44
  MapKey(&Throttle, LTB, EXEC("ActKey(KEYON+PULSE+engineBoost);"));
  
  // *** Coolie Hat Switch CS, orbital external camera, original DX45-DX48
  /*
  MapKey(&Throttle, CSU, DX45 );
  MapKey(&Throttle, CSD, DX46 );
  MapKey(&Throttle, CSR, DX47 );
  MapKey(&Throttle, CSL, DX48 );
  */
  MapKey(&Throttle, CSR, EXEC("DXAxis(DX_X_AXIS, -32000); DXAxis(DX_XROT_AXIS, 32000);" ));
  MapKey(&Throttle, CSL, EXEC("DXAxis(DX_X_AXIS, 32000); DXAxis(DX_XROT_AXIS, -32000);" ) );
  MapKeyR(&Throttle, CSR, EXEC("DXAxis(DX_X_AXIS, 0); DXAxis(DX_XROT_AXIS, 0);" ));
  MapKeyR(&Throttle, CSL, EXEC("DXAxis(DX_X_AXIS, 0); DXAxis(DX_XROT_AXIS, 0);" ) );

  // *** Mic Switch MS, original DX49-DX53
  // Fighter operations
  // TODO double-click / long press
  MapKey(&Throttle, MSP, fighterOpen );
  MapKeyIO(&Throttle, MSU, fighterDefend, fighterFollow);
  MapKeyIO(&Throttle, MSR, fighterAggr, fighterAttack);
  MapKey(&Throttle, MSD, fighterDock ); 
  MapKeyIO(&Throttle, MSL, fighterNoFire, fighterHold );
    
  // *** Speedbrake SPD, original DX54-DX56
  // *** Throttle Full forward / Full range / Trimmed full range presets
  MapKey(&Throttle, throttleUpKey,  EXEC("ActKey(KEYON+PULSE+ThrottlePresetUP);"));
  MapKey(&Throttle, throttleMidKey,  EXEC("ActKey(KEYON+PULSE+ThrottlePresetMID);"));
  MapKey(&Throttle, throttleDownKey,  EXEC("ActKey(KEYON+PULSE+ThrottlePresetDOWN);"));

  // *** Boat Switch BS
  // *** Cargo scoop & Landing gear
  /*
  MapKey(&Throttle, BSF, CHAIN(PULSE+cargoScoop, LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4)));
  MapKeyR(&Throttle, BSF, CHAIN(PULSE+cargoScoop, LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4)));
  MapKey(&Throttle, BSM, 0);
  MapKey(&Throttle, BSB, CHAIN(PULSE+landingGear, LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5)));
  MapKeyR(&Throttle, BSB, CHAIN(PULSE+landingGear, LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5)));
  */
  MapKey(&Throttle, BSF, EXEC("if(!Joystick[VPNK]) ActKey(KEYON+PULSE+cargoScoop);"));
  MapKeyR(&Throttle, BSF, EXEC("if(!Joystick[VPNK]) ActKey(KEYON+PULSE+cargoScoop);"));
  MapKey(&Throttle, BSM, 0);
  MapKey(&Throttle, BSB, EXEC("if(!Joystick[VPNK]) ActKey(KEYON+PULSE+landingGear);"));
  MapKeyR(&Throttle, BSB, EXEC("if(!Joystick[VPNK]) ActKey(KEYON+PULSE+landingGear);"));
  
  // *** China Hat CH
  // *** Frameshift Drive & Hyperspace Jump 
  //MapKey(&Throttle, CHF, CHAIN(PULSE+hyperspaceJump, KEYON+PULSE+LedOn(rcLED)));
  MapKey(&Throttle, CHF, EXEC("if(!Joystick[VPNK]) ActKey(KEYON+PULSE+superCruise);"
                              "else ActKey(KEYON+PULSE+frameshiftDrive);"));
  //MapKey(&Throttle, CHM, CHAIN(PULSE+ LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5)));
  MapKey(&Throttle, CHM, 0);
  MapKey(&Throttle, CHB, PULSE+hyperspaceJump);
  
  // *** Flaps FLAP, original DX62-DX64
  // *** Camera Suit Control
  MapKey(&Throttle, FLAPU, enterFreeCameraMode);
  MapKey(&Throttle, FLAPD, extCamera );
  MapKeyR(&Throttle, FLAPU, exitFreeCameraMode);

  // MOVE TO FUEL CONTROL, nav & night light here
  // *** Enhanced Attitude Control EAC, original DX65-DX66
  // *** Toggle Orbit Lines
  MapKey(&Throttle, EACON, CHAIN(PULSE+toggleOrbitLines));
  MapKey(&Throttle, EACOFF, CHAIN(PULSE+toggleOrbitLines));

  // MOVE TO FUEL CONTROL
  // *** RDR ALTM RDRNRM/RDRDIS, orignal DX67-DX68
  // *** Rotation correction  
  MapKey(&Throttle, RDRNRM, CHAIN(PULSE+rotationalCorrection));
  MapKey(&Throttle, RDRDIS, CHAIN(PULSE+rotationalCorrection));

  // *** Autopilot Engage Button AP, original DX69
  // *** TODO Initiate docking request
  MapKey(&Throttle, APENG, DX69 );

  /*
  //MACRO: Auto-Docking Request
  mRequestCancelDock = CHAIN(
                             LOCK+
                             PULSE+TargetPanel,    D(MiniPulseDelay),
                             PULSE+UINextPanel,    D(MiniPulseDelay),
                             PULSE+UINextPanel,    D(MiniPulseDelay),
                             PULSE+UISelect,       D(MiniPulseDelay),
                             PULSE+UIDown,         D(MiniPulseDelay),
                             PULSE+UISelect,       D(MiniPulseDelay),
                             PULSE+UIPrevPanel,    D(MiniPulseDelay),
                             PULSE+UIPrevPanel,    D(MiniPulseDelay),
                             PULSE+UIBack,         D(MiniPulseDelay),
                             PULSE+SetSpeed0,
                             LOCK
                             );
  */            

  // *** Autopilot Select Switch AP PATH | AP ALT/HDG | AP ALT , original DX70-DX72
  // *** Galaxy Map | System Map
  MapKey(&Throttle, APPAT, EXEC("if(!Joystick[VPNK]) ActKey(KEYON+PULSE+galaxyMap);"));
  MapKeyR(&Throttle, APPAT, EXEC("if(!Joystick[VPNK]) ActKey(KEYON+PULSE+galaxyMap);"));
  MapKey(&Throttle, APALT, EXEC("if(!Joystick[VPNK]) ActKey(KEYON+PULSE+systemMap);"));
  MapKeyR(&Throttle, APALT, EXEC("if(!Joystick[VPNK]) ActKey(KEYON+PULSE+systemMap);"));

  // *** Landing Gear / Warning Horn Silence Button LDGH, orignal DX73
  MapKey(&Throttle, LDGH, EXEC("ActKey(KEYON+PULSE+toggleOrbitLines);"));
  
  // *** APU Start APUON | APUOFF, original DX74-DX75
  // *** Silent run | Shifted Connect to PS4
  // TODO heat sink launch program
  /*
  MapKeyIO(&Throttle, APUON, CHAIN(PULSE+CAPS, EXEC("BlinkToOn(srLED);")),            // connect to PS4
      CHAIN(PULSE+silentRun, EXEC("BlinkToOn(srLED);")));      // silent run TODO heat sink launch program
  MapKeyIO(&Throttle, APUOFF, CHAIN(PULSE+L_SHIFT+CAPS, EXEC("BlinkToOff(srLED);")),  // disconnect from PS4
      CHAIN(PULSE+silentRun, EXEC("BlinkToOff(srLED);")));      // silent run off TODO heat sink launch program off
  */
  MapKeyIO(&Throttle, APUON, CHAIN(PULSE+connectPS),
                             CHAIN(PULSE+silentRun));     
  MapKeyIO(&Throttle, APUOFF, CHAIN(PULSE+disconnectPS),
                              CHAIN(PULSE+silentRun));

  // screenshot and video capture goes here
  // *** Engine Operate Ign/Norm Left EOL, original DX76-DX78
  // *** Navigation lights & Night vision TODO blinking on landing
  MapKey(&Throttle, EOLIGN,
      TEMPO(EXEC("ActKey(KEYON+PULSE+navLight);"),
            EXEC("ActKey(KEYON+PULSE+navLight);"),
            500));
  MapKey(&Throttle, EOLNORM, 0);
  MapKey(&Throttle, EOLMOTOR, PULSE+nightVision);
  MapKeyR(&Throttle, EOLMOTOR, PULSE+nightVision);

  // *** Engine Operate Ign/Norm Right EOR, original DX79-DX81
  // *** TEMP Navigation lights & Night vision TODO blinking on landing
  MapKey(&Throttle, EORIGN,
      TEMPO(EXEC("ActKey(KEYON+PULSE+navLight);"),
            EXEC("ActKey(KEYON+PULSE+navLight);"),
            500));
  MapKey(&Throttle, EORNORM, 0);
  MapKey(&Throttle, EORMOTOR, EXEC("if(!Joystick[VPNK]) ActKey(KEYON+PULSE+nightVision);"));
  MapKeyR(&Throttle, EORMOTOR, EXEC("if(!Joystick[VPNK]) ActKey(KEYON+PULSE+nightVision);"));

  // rotCorrection & orbital lines
  // *** Engine Fuel Flow Switches Left EFL, original DX82-DX83
  // *** Full Spectrum Scanner
  MapKey(&Throttle, EFLNORM,  PULSE+fssEnter);
  MapKey(&Throttle, EFLOVER,  PULSE+fssExit);

  // *** Engine Fuel Flow Switches Right EFR
  MapKey(&Throttle, EFROVER,  DX84 );
  MapKey(&Throttle, EFRNORM,  DX85 );

  // *** Throttle Idle Detents Left
  MapKey(&Throttle, IDLERON,  DX86 );
  MapKey(&Throttle, IDLEROFF, DX87 );

  // *** Throttle Idle Detents Right
  MapKey(&Throttle, IDLELON,  DX88 );
  MapKey(&Throttle, IDLELOFF, DX89 ); 

  
  // ----------------------------- LED Mapping ---------------------------------
  
  LedIntensity( &Throttle, LED_BRIGHTNESS );
  LedEnable(    &Throttle, LED0,      LED_BACKLIGHT );
    
  if(LED1_BTN != -1) {
    MapLed(       &LED1_DEV, LED1_BTN,  &Throttle,      LED1,   LED_ONPRESS );
  } else {
    LedEnable(    &Throttle, LED1,      0 );
  }
  
  if(LED2_BTN != -1) {
    MapLed(       &LED2_DEV, LED2_BTN,  &Throttle,      LED2,   LED_ONPRESS );
  } else {
    LedEnable(    &Throttle, LED2,      0 );
  }
  
  if(LED3_BTN != -1) {
    MapLed(       &LED3_DEV, LED3_BTN,  &Throttle,      LED3,   LED_ONPRESS );
  } else {
    LedEnable(    &Throttle, LED3,      0 );
  }
  
  if(LED4_BTN != -1) {
    MapLed(       &LED4_DEV, LED4_BTN,  &Throttle,      LED4,   LED_ONPRESS );
  } else {
    LedEnable(    &Throttle, LED4,      0 );
  }
  
  if(LED5_BTN != -1) {
    MapLed(       &LED5_DEV, LED5_BTN,  &Throttle,      LED5,   LED_ONPRESS );
  } else {
    LedEnable(    &Throttle, LED5,      0 );
  }
}

int EventHandle(int type, alias o, int x) {
    int TRPCOMBO;

    //DefaultMapping(&o, x);
    PovMapping(&o, x);
    LDcMapping(&o, x);

    if (&o == &TFRPRudder) {
        GetAxisData(&o, x);
        axdata.val = AxisVal(o[x], &axdata);
	    if( x == TRPLEFT | x == TRPRIGHT ) {
            // axdata.locked = 1; // uncommend to disable pedals but keep TRPCOMBO axis
            // if both toes > 80% activate reverse & SRV brake 6571
            // if( (TFRPRudder[TRPRIGHT] < 6571 ) & ( TFRPRudder[TRPLEFT] < 6571 ) ) {
            if( (TFRPRudder[TRPRIGHT] < 120 ) & ( TFRPRudder[TRPLEFT] < 120 ) ) {
                /* KeyAxis(&TFRPRudder, TRPRIGHT, 0, AXMAP1(2, throttleReverse, throttleReverse)); */
                ActKey(KEYON+DOWN+thrustReverse);
                DXAxis(DX_ZROT_AXIS, 0);
                axdata.locked = 1;
            } else {
                TRPCOMBO = -TFRPRudder[TRPRIGHT]/2 + TFRPRudder[TRPLEFT]/2;
                ActKey(KEYON+UP+thrustReverse);
                DXAxis(DX_ZROT_AXIS, TRPCOMBO);
            }
        }
	
        if(!axdata.locked & !axdata.relative)
            GameOutput(&o, x, axdata.val);
    } else DefaultMapping(&o, x);
}

